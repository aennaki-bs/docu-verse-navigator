view logs doesn't work.
public class LogHistory {
        [Key]
        public int Id { get; set; }
        [Required]
        public int UserId { get; set; }
        [ForeignKey("UserId")]
        public required User User { get; set; }
        [Required]
        public DateTime Timestamp { get; set; }
        [Required]
        public int ActionType { get; set; } //  0 for Logout, 1 for Login, 2 create his profile, 3 update his profile, 4 create doc, 5 update doc, 6 delete doc, 7 create profile, 8 update profile, 9 delete profile
        public string Description { get; set; } = string.Empty;
    }
namespace DocManagementBackend.Models
{
    public class UserLogDto
    {
        public string Username { get; set; } = string.Empty;
        public string? Role { get; set; } = string.Empty;
    }

    public class LogHistoryDto
    {
        public int Id { get; set; }
        public int ActionType { get; set; }
        public DateTime Timestamp { get; set; }
        public string Description { get; set; } = string.Empty;
        public UserLogDto User { get; set; } = new UserLogDto();
    }
}

[HttpGet("logs/{id}")]
        public async Task<IActionResult> GetUserLogHistory(int id)
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (userIdClaim == null)
                return Unauthorized("User ID claim is missing.");
            int userId = int.Parse(userIdClaim);
            var ThisUser = await _context.Users.Include(u => u.Role).FirstOrDefaultAsync(u => u.Id == userId);
            if (ThisUser == null)
                return BadRequest("User not found.");
            if (!ThisUser.IsActive)
                return Unauthorized("User account is deactivated.");
            if (ThisUser.Role!.RoleName != "Admin")
                return Unauthorized("User Not Allowed To do this action.");
            var user = await _context.Users.Include(u => u.Role).FirstOrDefaultAsync(u => u.Id == id);
            if (user == null)
                return NotFound("User not found!");
            var logsDto = await _context.LogHistories.Where(l => l.UserId == id).Include(l => l.User)
                .ThenInclude(u => u.Role)
            .Select(l => new LogHistoryDto
            {
                Id = l.Id,
                ActionType = l.ActionType,
                Timestamp = l.Timestamp,
                Description = l.Description,
                User = new UserLogDto
                {
                    Username = l.User.Username,
                    Role = l.User.Role != null ? l.User.Role.RoleName : string.Empty
                }
            }).OrderByDescending(l => l.Timestamp).ToListAsync();
            if (logsDto == null)
                return NotFound("User logs not found!");
            return Ok(logsDto);
        }